// Automatic Text Color
@function set-button-text-color($color) {
    @if (lightness($color) > 40) {
        @return black;
    }

    @else {
        @return white;
    }
}

//? usage
// .button {
//     $color:MediumSeaGreen;

//    background-color:$color;
//    color:set-button-text-color($color);
//   }

// ------------------------------------------------------------------

// Clearfix mixin
%clearfix {
    *zoom: 1;

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

//? Usage
// .container-with-floated-children {
//   @extend %clearfix;
// }

// -----------------------------------------------------------

// Define vertical, horizontal, or both position
@mixin center($position) {
    position: absolute;

    @if $position=="vertical" {
        top: 50%;
        -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    }

    @else if $position=="horizontal" {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        transform: translate(-50%);
    }

    @else if $position=="both" {
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

//? Using the mixin
// .foo {
//   @include center(both);
// }
// .foo-parent {
//   position: relative;
// }

// ------------------------------------------------------------------------

//Animation mixin setup
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @-moz-keyframes #{$animation-name} {
        @content;
    }

    @-ms-keyframes #{$animation-name} {
        @content;
    }

    @-o-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

//?Usage
//? Define animation name, and properties
// @include keyframes(fade-out) {
//   0% { opacity: 1; }
//   90% { opacity: 0; }
// }
//? Add animation to element
// .element {
//   width: 100px;
//   height: 100px;
//   background: black;
//   @include animation('fade-out 5s 3'); 3 is for repeat
// }


// * hardware acceleration
@mixin accelerate() {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
}

// -----------------------------------------------------------------
// This mixin will allow you to add a rule in the same spot as the CSS property defining the original image. for retina displays

@mixin image-2x($image, $width, $height) {

    @media (min--moz-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {
        background-image: url($image);
        background-size: $width $height;
    }
}

//? Usage
// div.logo {
//   background: url("logo.png") no-repeat;
//   @include image-2x("logo2x.png", 100px, 25px);
// }

// -------------------------------------------------------------------

@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation=="vertical" {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    }

    @else if $orientation=="horizontal" {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    }

    @else {
        background: -webkit-radial-gradient(center,
            ellipse cover,
            $start-color,
            $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

//? Usage:
//$start-color, $end-color, $orientation - vertical/horizontal/radial
//  .foo {
//     @include background-gradient(red, black, 'vertical');
//   }
//? Output
//   .foo {
//     background: -webkit-linear-gradient(top, red, black);
//     background: linear-gradient(to bottom, red, black);
//   }

// -------------------------------------------------------------------
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

// ? Usage
// p {
//   @include font-size(14px)
// }

//-----------------------------------------------------

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// ? Usage
// .faded-text {
//   @include opacity(0.8);
// }

//-----------------------------------------------------

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// ? Usage
// <button class="mobile-navigation-trigger">
//   <b class="visually-hidden">Open the navigation</b>
//   <img src="img/mobile-navigation-icon.svg">
// </button>
// .visually-hidden {
//   @extend %visuallyhidden;
// }

//-----------------------------------------------------

